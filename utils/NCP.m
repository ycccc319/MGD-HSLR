function [probMatrix1,probMatrix2,results] = NCP(Zs,Ys,Zt,C)
    %% input:
    %%% Zs, Zt:      the projected source / target samples
    %%% Ys:          the source labels
    %%% C:           the class number
    %% output:
    %%% probMatrix1: the probability matrix generated by 
    %%%                                     f(Zs*Ys,Zt);
    %%% probMatrix2: the probability matrix generated by
    %%%                                     f(vgg_kmeans(Zt),Zt);
    %%% results:     the probability matrix generated by
    %%%                                     max(probMatrix1,probMatrix2);
    num_class=C;
    domainS_proj=Zs';domainT_proj=Zt';
    domainS_labels=Ys;
    ReducedDim=size(Zs,1);
    proj_mean = mean([domainS_proj;domainT_proj]);
    domainS_proj = domainS_proj - repmat(proj_mean,[size(domainS_proj,1) 1 ]);
    domainT_proj = domainT_proj - repmat(proj_mean,[size(domainT_proj,1) 1 ]);
    domainS_proj = L2Norm(domainS_proj);
    domainT_proj = L2Norm(domainT_proj);
    %% By Nearest prototype
    classMeans = (zeros(C,ReducedDim));
    for i = 1:C
        classMeans(i,:) = mean(domainS_proj(domainS_labels==i,:));
    end
    classMeans = L2Norm(classMeans);
    distClassMeans = EuDist2(domainT_proj,classMeans);
    expMatrix = exp(-distClassMeans);
    probMatrix1 = expMatrix./repmat(sum(expMatrix,2),[1 num_class]);
    %% By KMeans
    targetClusterMeans = vgg_kmeans(double(domainT_proj'), num_class, classMeans')';
    targetClusterMeans = L2Norm(targetClusterMeans);
    distClusterMeans = EuDist2(domainT_proj,targetClusterMeans);
    expMatrix2 = exp(-distClusterMeans);
    probMatrix2 = expMatrix2./repmat(sum(expMatrix2,2),[1 num_class]);
    %% By max
    results = max(probMatrix1,probMatrix2);
end

